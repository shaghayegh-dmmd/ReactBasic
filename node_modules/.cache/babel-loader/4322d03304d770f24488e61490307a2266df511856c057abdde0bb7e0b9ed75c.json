{"ast":null,"code":"'use strict';\n\n/**\r\n * Takes an array of [keyValue1, keyValue2] pairs and creates an object of {keyValue1: keyValue2, keyValue2: keyValue1}\r\n * @param {Array} array the array of pairs\r\n * @return {Object} the {key, value} pair object\r\n */\nfunction arrayToObject(array) {\n  return array.reduce(function (obj, _ref) {\n    var prop1 = _ref[0],\n      prop2 = _ref[1];\n    obj[prop1] = prop2;\n    obj[prop2] = prop1;\n    return obj;\n  }, {});\n}\nfunction isBoolean(val) {\n  return typeof val === 'boolean';\n}\nfunction isFunction(val) {\n  return typeof val === 'function';\n}\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\nfunction isNullOrUndefined(val) {\n  return val === null || typeof val === 'undefined';\n}\nfunction isObject(val) {\n  return val && typeof val === 'object';\n}\nfunction isString(val) {\n  return typeof val === 'string';\n}\nfunction includes(inclusive, inclusee) {\n  return inclusive.indexOf(inclusee) !== -1;\n}\n\n/**\r\n * Flip the sign of a CSS value, possibly with a unit.\r\n *\r\n * We can't just negate the value with unary minus due to the units.\r\n *\r\n * @private\r\n * @param {String} value - the original value (for example 77%)\r\n * @return {String} the result (for example -77%)\r\n */\nfunction flipSign(value) {\n  if (parseFloat(value) === 0) {\n    // Don't mangle zeroes\n    return value;\n  }\n  if (value[0] === '-') {\n    return value.slice(1);\n  }\n  return \"-\" + value;\n}\nfunction flipTransformSign(match, prefix, offset, suffix) {\n  return prefix + flipSign(offset) + suffix;\n}\n\n/**\r\n * Takes a percentage for background position and inverts it.\r\n * This was copied and modified from CSSJanus:\r\n * https://github.com/cssjanus/cssjanus/blob/4245f834365f6cfb0239191a151432fb85abab23/src/cssjanus.js#L152-L175\r\n * @param {String} value - the original value (for example 77%)\r\n * @return {String} the result (for example 23%)\r\n */\nfunction calculateNewBackgroundPosition(value) {\n  var idx = value.indexOf('.');\n  if (idx === -1) {\n    value = 100 - parseFloat(value) + \"%\";\n  } else {\n    // Two off, one for the \"%\" at the end, one for the dot itself\n    var len = value.length - idx - 2;\n    value = 100 - parseFloat(value);\n    value = value.toFixed(len) + \"%\";\n  }\n  return value;\n}\n\n/**\r\n * This takes a list of CSS values and converts it to an array\r\n * @param {String} value - something like `1px`, `1px 2em`, or `3pt rgb(150, 230, 550) 40px calc(100% - 5px)`\r\n * @return {Array} the split values (for example: `['3pt', 'rgb(150, 230, 550)', '40px', 'calc(100% - 5px)']`)\r\n */\nfunction getValuesAsList(value) {\n  return value.replace(/ +/g, ' ') // remove all extraneous spaces\n  .split(' ').map(function (i) {\n    return i.trim();\n  }) // get rid of extra space before/after each item\n  .filter(Boolean) // get rid of empty strings\n  // join items which are within parenthese\n  // luckily `calc (100% - 5px)` is invalid syntax and it must be `calc(100% - 5px)`, otherwise this would be even more complex\n  .reduce(function (_ref2, item) {\n    var list = _ref2.list,\n      state = _ref2.state;\n    var openParansCount = (item.match(/\\(/g) || []).length;\n    var closedParansCount = (item.match(/\\)/g) || []).length;\n    if (state.parensDepth > 0) {\n      list[list.length - 1] = list[list.length - 1] + \" \" + item;\n    } else {\n      list.push(item);\n    }\n    state.parensDepth += openParansCount - closedParansCount;\n    return {\n      list: list,\n      state: state\n    };\n  }, {\n    list: [],\n    state: {\n      parensDepth: 0\n    }\n  }).list;\n}\n\n/**\r\n * This is intended for properties that are `top right bottom left` and will switch them to `top left bottom right`\r\n * @param {String} value - `1px 2px 3px 4px` for example, but also handles cases where there are too few/too many and\r\n * simply returns the value in those cases (which is the correct behavior)\r\n * @return {String} the result - `1px 4px 3px 2px` for example.\r\n */\nfunction handleQuartetValues(value) {\n  var splitValues = getValuesAsList(value);\n  if (splitValues.length <= 3 || splitValues.length > 4) {\n    return value;\n  }\n  var top = splitValues[0],\n    right = splitValues[1],\n    bottom = splitValues[2],\n    left = splitValues[3];\n  return [top, left, bottom, right].join(' ');\n}\n\n/**\r\n *\r\n * @param {String|Number|Object} value css property value to test\r\n * @returns If the css property value can(should?) have an RTL equivalent\r\n */\nfunction canConvertValue(value) {\n  return !isBoolean(value) && !isNullOrUndefined(value);\n}\n\n/**\r\n * Splits a shadow style into its separate shadows using the comma delimiter, but creating an exception\r\n * for comma separated values in parentheses often used for rgba colours.\r\n * @param {String} value\r\n * @returns {Array} array of all box shadow values in the string\r\n */\nfunction splitShadow(value) {\n  var shadows = [];\n  var start = 0;\n  var end = 0;\n  var rgba = false;\n  while (end < value.length) {\n    if (!rgba && value[end] === ',') {\n      shadows.push(value.substring(start, end).trim());\n      end++;\n      start = end;\n    } else if (value[end] === \"(\") {\n      rgba = true;\n      end++;\n    } else if (value[end] === ')') {\n      rgba = false;\n      end++;\n    } else {\n      end++;\n    }\n  }\n\n  // push the last shadow value if there is one\n  // istanbul ignore next\n  if (start != end) {\n    shadows.push(value.substring(start, end + 1));\n  }\n  return shadows;\n}\n\n// some values require a little fudging, that fudging goes here.\nvar propertyValueConverters = {\n  padding: function padding(_ref) {\n    var value = _ref.value;\n    if (isNumber(value)) {\n      return value;\n    }\n    return handleQuartetValues(value);\n  },\n  textShadow: function textShadow(_ref2) {\n    var value = _ref2.value;\n    var flippedShadows = splitShadow(value).map(function (shadow) {\n      // intentionally leaving off the `g` flag here because we only want to change the first number (which is the offset-x)\n      return shadow.replace(/(^|\\s)(-*)([.|\\d]+)/, function (match, whiteSpace, negative, number) {\n        if (number === '0') {\n          return match;\n        }\n        var doubleNegative = negative === '' ? '-' : '';\n        return \"\" + whiteSpace + doubleNegative + number;\n      });\n    });\n    return flippedShadows.join(',');\n  },\n  borderColor: function borderColor(_ref3) {\n    var value = _ref3.value;\n    return handleQuartetValues(value);\n  },\n  borderRadius: function borderRadius(_ref4) {\n    var value = _ref4.value;\n    if (isNumber(value)) {\n      return value;\n    }\n    if (includes(value, '/')) {\n      var _value$split = value.split('/'),\n        radius1 = _value$split[0],\n        radius2 = _value$split[1];\n      var convertedRadius1 = propertyValueConverters.borderRadius({\n        value: radius1.trim()\n      });\n      var convertedRadius2 = propertyValueConverters.borderRadius({\n        value: radius2.trim()\n      });\n      return convertedRadius1 + \" / \" + convertedRadius2;\n    }\n    var splitValues = getValuesAsList(value);\n    switch (splitValues.length) {\n      case 2:\n        {\n          return splitValues.reverse().join(' ');\n        }\n      case 4:\n        {\n          var topLeft = splitValues[0],\n            topRight = splitValues[1],\n            bottomRight = splitValues[2],\n            bottomLeft = splitValues[3];\n          return [topRight, topLeft, bottomLeft, bottomRight].join(' ');\n        }\n      default:\n        {\n          return value;\n        }\n    }\n  },\n  background: function background(_ref5) {\n    var value = _ref5.value,\n      valuesToConvert = _ref5.valuesToConvert,\n      isRtl = _ref5.isRtl,\n      bgImgDirectionRegex = _ref5.bgImgDirectionRegex,\n      bgPosDirectionRegex = _ref5.bgPosDirectionRegex;\n    if (isNumber(value)) {\n      return value;\n    }\n\n    // Yeah, this is in need of a refactor 🙃...\n    // but this property is a tough cookie 🍪\n    // get the backgroundPosition out of the string by removing everything that couldn't be the backgroundPosition value\n    var backgroundPositionValue = value.replace(/(url\\(.*?\\))|(rgba?\\(.*?\\))|(hsl\\(.*?\\))|(#[a-fA-F0-9]+)|((^| )(\\D)+( |$))/g, '').trim();\n    // replace that backgroundPosition value with the converted version\n    value = value.replace(backgroundPositionValue, propertyValueConverters.backgroundPosition({\n      value: backgroundPositionValue,\n      valuesToConvert: valuesToConvert,\n      isRtl: isRtl,\n      bgPosDirectionRegex: bgPosDirectionRegex\n    }));\n    // do the backgroundImage value replacing on the whole value (because why not?)\n    return propertyValueConverters.backgroundImage({\n      value: value,\n      valuesToConvert: valuesToConvert,\n      bgImgDirectionRegex: bgImgDirectionRegex\n    });\n  },\n  backgroundImage: function backgroundImage(_ref6) {\n    var value = _ref6.value,\n      valuesToConvert = _ref6.valuesToConvert,\n      bgImgDirectionRegex = _ref6.bgImgDirectionRegex;\n    if (!includes(value, 'url(') && !includes(value, 'linear-gradient(')) {\n      return value;\n    }\n    return value.replace(bgImgDirectionRegex, function (match, g1, group2) {\n      return match.replace(group2, valuesToConvert[group2]);\n    });\n  },\n  backgroundPosition: function backgroundPosition(_ref7) {\n    var value = _ref7.value,\n      valuesToConvert = _ref7.valuesToConvert,\n      isRtl = _ref7.isRtl,\n      bgPosDirectionRegex = _ref7.bgPosDirectionRegex;\n    return value\n    // intentionally only grabbing the first instance of this because that represents `left`\n    .replace(isRtl ? /^((-|\\d|\\.)+%)/ : null, function (match, group) {\n      return calculateNewBackgroundPosition(group);\n    }).replace(bgPosDirectionRegex, function (match) {\n      return valuesToConvert[match];\n    });\n  },\n  backgroundPositionX: function backgroundPositionX(_ref8) {\n    var value = _ref8.value,\n      valuesToConvert = _ref8.valuesToConvert,\n      isRtl = _ref8.isRtl,\n      bgPosDirectionRegex = _ref8.bgPosDirectionRegex;\n    if (isNumber(value)) {\n      return value;\n    }\n    return propertyValueConverters.backgroundPosition({\n      value: value,\n      valuesToConvert: valuesToConvert,\n      isRtl: isRtl,\n      bgPosDirectionRegex: bgPosDirectionRegex\n    });\n  },\n  transition: function transition(_ref9) {\n    var value = _ref9.value,\n      propertiesToConvert = _ref9.propertiesToConvert;\n    return value.split(/,\\s*/g).map(function (transition) {\n      var values = transition.split(' ');\n\n      // Property is always defined first\n      values[0] = propertiesToConvert[values[0]] || values[0];\n      return values.join(' ');\n    }).join(', ');\n  },\n  transitionProperty: function transitionProperty(_ref10) {\n    var value = _ref10.value,\n      propertiesToConvert = _ref10.propertiesToConvert;\n    return value.split(/,\\s*/g).map(function (prop) {\n      return propertiesToConvert[prop] || prop;\n    }).join(', ');\n  },\n  transform: function transform(_ref11) {\n    var value = _ref11.value;\n    // This was copied and modified from CSSJanus:\n    // https://github.com/cssjanus/cssjanus/blob/4a40f001b1ba35567112d8b8e1d9d95eda4234c3/src/cssjanus.js#L152-L153\n    var nonAsciiPattern = \"[^\\\\u0020-\\\\u007e]\";\n    var escapePattern = \"(?:\" + '(?:(?:\\\\[0-9a-f]{1,6})(?:\\\\r\\\\n|\\\\s)?)' + \"|\\\\\\\\[^\\\\r\\\\n\\\\f0-9a-f])\";\n    var signedQuantPattern = \"((?:-?\" + ('(?:[0-9]*\\\\.[0-9]+|[0-9]+)' + \"(?:\\\\s*\" + '(?:em|ex|px|cm|mm|in|pt|pc|deg|rad|grad|ms|s|hz|khz|%)' + \"|\" + (\"-?\" + (\"(?:[_a-z]|\" + nonAsciiPattern + \"|\" + escapePattern + \")\") + (\"(?:[_a-z0-9-]|\" + nonAsciiPattern + \"|\" + escapePattern + \")\") + \"*\") + \")?\") + \")|(?:inherit|auto))\";\n    var translateXRegExp = new RegExp(\"(translateX\\\\s*\\\\(\\\\s*)\" + signedQuantPattern + \"(\\\\s*\\\\))\", 'gi');\n    var translateRegExp = new RegExp(\"(translate\\\\s*\\\\(\\\\s*)\" + signedQuantPattern + \"((?:\\\\s*,\\\\s*\" + signedQuantPattern + \"){0,1}\\\\s*\\\\))\", 'gi');\n    var translate3dRegExp = new RegExp(\"(translate3d\\\\s*\\\\(\\\\s*)\" + signedQuantPattern + \"((?:\\\\s*,\\\\s*\" + signedQuantPattern + \"){0,2}\\\\s*\\\\))\", 'gi');\n    var rotateRegExp = new RegExp(\"(rotate[ZY]?\\\\s*\\\\(\\\\s*)\" + signedQuantPattern + \"(\\\\s*\\\\))\", 'gi');\n    return value.replace(translateXRegExp, flipTransformSign).replace(translateRegExp, flipTransformSign).replace(translate3dRegExp, flipTransformSign).replace(rotateRegExp, flipTransformSign);\n  }\n};\npropertyValueConverters.objectPosition = propertyValueConverters.backgroundPosition;\npropertyValueConverters.margin = propertyValueConverters.padding;\npropertyValueConverters.borderWidth = propertyValueConverters.padding;\npropertyValueConverters.boxShadow = propertyValueConverters.textShadow;\npropertyValueConverters.webkitBoxShadow = propertyValueConverters.boxShadow;\npropertyValueConverters.mozBoxShadow = propertyValueConverters.boxShadow;\npropertyValueConverters.WebkitBoxShadow = propertyValueConverters.boxShadow;\npropertyValueConverters.MozBoxShadow = propertyValueConverters.boxShadow;\npropertyValueConverters.borderStyle = propertyValueConverters.borderColor;\npropertyValueConverters.webkitTransform = propertyValueConverters.transform;\npropertyValueConverters.mozTransform = propertyValueConverters.transform;\npropertyValueConverters.WebkitTransform = propertyValueConverters.transform;\npropertyValueConverters.MozTransform = propertyValueConverters.transform;\npropertyValueConverters.transformOrigin = propertyValueConverters.backgroundPosition;\npropertyValueConverters.webkitTransformOrigin = propertyValueConverters.transformOrigin;\npropertyValueConverters.mozTransformOrigin = propertyValueConverters.transformOrigin;\npropertyValueConverters.WebkitTransformOrigin = propertyValueConverters.transformOrigin;\npropertyValueConverters.MozTransformOrigin = propertyValueConverters.transformOrigin;\npropertyValueConverters.webkitTransition = propertyValueConverters.transition;\npropertyValueConverters.mozTransition = propertyValueConverters.transition;\npropertyValueConverters.WebkitTransition = propertyValueConverters.transition;\npropertyValueConverters.MozTransition = propertyValueConverters.transition;\npropertyValueConverters.webkitTransitionProperty = propertyValueConverters.transitionProperty;\npropertyValueConverters.mozTransitionProperty = propertyValueConverters.transitionProperty;\npropertyValueConverters.WebkitTransitionProperty = propertyValueConverters.transitionProperty;\npropertyValueConverters.MozTransitionProperty = propertyValueConverters.transitionProperty;\n\n// kebab-case versions\n\npropertyValueConverters['text-shadow'] = propertyValueConverters.textShadow;\npropertyValueConverters['border-color'] = propertyValueConverters.borderColor;\npropertyValueConverters['border-radius'] = propertyValueConverters.borderRadius;\npropertyValueConverters['background-image'] = propertyValueConverters.backgroundImage;\npropertyValueConverters['background-position'] = propertyValueConverters.backgroundPosition;\npropertyValueConverters['background-position-x'] = propertyValueConverters.backgroundPositionX;\npropertyValueConverters['object-position'] = propertyValueConverters.objectPosition;\npropertyValueConverters['border-width'] = propertyValueConverters.padding;\npropertyValueConverters['box-shadow'] = propertyValueConverters.textShadow;\npropertyValueConverters['-webkit-box-shadow'] = propertyValueConverters.textShadow;\npropertyValueConverters['-moz-box-shadow'] = propertyValueConverters.textShadow;\npropertyValueConverters['border-style'] = propertyValueConverters.borderColor;\npropertyValueConverters['-webkit-transform'] = propertyValueConverters.transform;\npropertyValueConverters['-moz-transform'] = propertyValueConverters.transform;\npropertyValueConverters['transform-origin'] = propertyValueConverters.transformOrigin;\npropertyValueConverters['-webkit-transform-origin'] = propertyValueConverters.transformOrigin;\npropertyValueConverters['-moz-transform-origin'] = propertyValueConverters.transformOrigin;\npropertyValueConverters['-webkit-transition'] = propertyValueConverters.transition;\npropertyValueConverters['-moz-transition'] = propertyValueConverters.transition;\npropertyValueConverters['transition-property'] = propertyValueConverters.transitionProperty;\npropertyValueConverters['-webkit-transition-property'] = propertyValueConverters.transitionProperty;\npropertyValueConverters['-moz-transition-property'] = propertyValueConverters.transitionProperty;\n\n// this will be an object of properties that map to their corresponding rtl property (their doppelganger)\nvar propertiesToConvert = arrayToObject([['paddingLeft', 'paddingRight'], ['marginLeft', 'marginRight'], ['left', 'right'], ['borderLeft', 'borderRight'], ['borderLeftColor', 'borderRightColor'], ['borderLeftStyle', 'borderRightStyle'], ['borderLeftWidth', 'borderRightWidth'], ['borderTopLeftRadius', 'borderTopRightRadius'], ['borderBottomLeftRadius', 'borderBottomRightRadius'],\n// kebab-case versions\n['padding-left', 'padding-right'], ['margin-left', 'margin-right'], ['border-left', 'border-right'], ['border-left-color', 'border-right-color'], ['border-left-style', 'border-right-style'], ['border-left-width', 'border-right-width'], ['border-top-left-radius', 'border-top-right-radius'], ['border-bottom-left-radius', 'border-bottom-right-radius']]);\nvar propsToIgnore = ['content'];\n\n// this is the same as the propertiesToConvert except for values\nvar valuesToConvert = arrayToObject([['ltr', 'rtl'], ['left', 'right'], ['w-resize', 'e-resize'], ['sw-resize', 'se-resize'], ['nw-resize', 'ne-resize']]);\n\n// Sorry for the regex 😞, but basically thisis used to replace _every_ instance of\n// `ltr`, `rtl`, `right`, and `left` in `backgroundimage` with the corresponding opposite.\n// A situation we're accepting here:\n// url('/left/right/rtl/ltr.png') will be changed to url('/right/left/ltr/rtl.png')\n// Definite trade-offs here, but I think it's a good call.\nvar bgImgDirectionRegex = new RegExp('(^|\\\\W|_)((ltr)|(rtl)|(left)|(right))(\\\\W|_|$)', 'g');\nvar bgPosDirectionRegex = new RegExp('(left)|(right)');\n\n/**\r\n * converts properties and values in the CSS in JS object to their corresponding RTL values\r\n * @param {Object} object the CSS in JS object\r\n * @return {Object} the RTL converted object\r\n */\nfunction convert(object) {\n  return Object.keys(object).reduce(function (newObj, originalKey) {\n    var originalValue = object[originalKey];\n    if (isString(originalValue)) {\n      // you're welcome to later code 😺\n      originalValue = originalValue.trim();\n    }\n\n    // Some properties should never be transformed\n    if (includes(propsToIgnore, originalKey)) {\n      newObj[originalKey] = originalValue;\n      return newObj;\n    }\n    var _convertProperty = convertProperty(originalKey, originalValue),\n      key = _convertProperty.key,\n      value = _convertProperty.value;\n    newObj[key] = value;\n    return newObj;\n  }, Array.isArray(object) ? [] : {});\n}\n\n/**\r\n * Converts a property and its value to the corresponding RTL key and value\r\n * @param {String} originalKey the original property key\r\n * @param {Number|String|Object} originalValue the original css property value\r\n * @return {Object} the new {key, value} pair\r\n */\nfunction convertProperty(originalKey, originalValue) {\n  var isNoFlip = /\\/\\*\\s?@noflip\\s?\\*\\//.test(originalValue);\n  var key = isNoFlip ? originalKey : getPropertyDoppelganger(originalKey);\n  var value = isNoFlip ? originalValue : getValueDoppelganger(key, originalValue);\n  return {\n    key: key,\n    value: value\n  };\n}\n\n/**\r\n * This gets the RTL version of the given property if it has a corresponding RTL property\r\n * @param {String} property the name of the property\r\n * @return {String} the name of the RTL property\r\n */\nfunction getPropertyDoppelganger(property) {\n  return propertiesToConvert[property] || property;\n}\n\n/**\r\n * This converts the given value to the RTL version of that value based on the key\r\n * @param {String} key this is the key (note: this should be the RTL version of the originalKey)\r\n * @param {String|Number|Object} originalValue the original css property value. If it's an object, then we'll convert that as well\r\n * @return {String|Number|Object} the converted value\r\n */\nfunction getValueDoppelganger(key, originalValue) {\n  if (!canConvertValue(originalValue)) {\n    return originalValue;\n  }\n  if (isObject(originalValue)) {\n    return convert(originalValue); // recursion 🌀\n  }\n\n  var isNum = isNumber(originalValue);\n  var isFunc = isFunction(originalValue);\n  var importantlessValue = isNum || isFunc ? originalValue : originalValue.replace(/ !important.*?$/, '');\n  var isImportant = !isNum && importantlessValue.length !== originalValue.length;\n  var valueConverter = propertyValueConverters[key];\n  var newValue;\n  if (valueConverter) {\n    newValue = valueConverter({\n      value: importantlessValue,\n      valuesToConvert: valuesToConvert,\n      propertiesToConvert: propertiesToConvert,\n      isRtl: true,\n      bgImgDirectionRegex: bgImgDirectionRegex,\n      bgPosDirectionRegex: bgPosDirectionRegex\n    });\n  } else {\n    newValue = valuesToConvert[importantlessValue] || importantlessValue;\n  }\n  if (isImportant) {\n    return newValue + \" !important\";\n  }\n  return newValue;\n}\nexports.arrayToObject = arrayToObject;\nexports.calculateNewBackgroundPosition = calculateNewBackgroundPosition;\nexports.canConvertValue = canConvertValue;\nexports.convert = convert;\nexports.convertProperty = convertProperty;\nexports.flipSign = flipSign;\nexports.flipTransformSign = flipTransformSign;\nexports.getPropertyDoppelganger = getPropertyDoppelganger;\nexports.getValueDoppelganger = getValueDoppelganger;\nexports.getValuesAsList = getValuesAsList;\nexports.handleQuartetValues = handleQuartetValues;\nexports.includes = includes;\nexports.isBoolean = isBoolean;\nexports.isFunction = isFunction;\nexports.isNullOrUndefined = isNullOrUndefined;\nexports.isNumber = isNumber;\nexports.isObject = isObject;\nexports.isString = isString;\nexports.propertiesToConvert = propertiesToConvert;\nexports.propertyValueConverters = propertyValueConverters;\nexports.propsToIgnore = propsToIgnore;\nexports.splitShadow = splitShadow;\nexports.valuesToConvert = valuesToConvert;","map":{"version":3,"names":["arrayToObject","array","reduce","obj","_ref","prop1","prop2","isBoolean","val","isFunction","isNumber","isNullOrUndefined","isObject","isString","includes","inclusive","inclusee","indexOf","flipSign","value","parseFloat","slice","flipTransformSign","match","prefix","offset","suffix","calculateNewBackgroundPosition","idx","len","length","toFixed","getValuesAsList","replace","split","map","i","trim","filter","Boolean","_ref2","item","list","state","openParansCount","closedParansCount","parensDepth","push","handleQuartetValues","splitValues","top","right","bottom","left","join","canConvertValue","splitShadow","shadows","start","end","rgba","substring","propertyValueConverters","padding","textShadow","flippedShadows","shadow","whiteSpace","negative","number","doubleNegative","borderColor","_ref3","borderRadius","_ref4","_value$split","radius1","radius2","convertedRadius1","convertedRadius2","reverse","topLeft","topRight","bottomRight","bottomLeft","background","_ref5","valuesToConvert","isRtl","bgImgDirectionRegex","bgPosDirectionRegex","backgroundPositionValue","backgroundPosition","backgroundImage","_ref6","g1","group2","_ref7","group","backgroundPositionX","_ref8","transition","_ref9","propertiesToConvert","values","transitionProperty","_ref10","prop","transform","_ref11","nonAsciiPattern","escapePattern","signedQuantPattern","translateXRegExp","RegExp","translateRegExp","translate3dRegExp","rotateRegExp","objectPosition","margin","borderWidth","boxShadow","webkitBoxShadow","mozBoxShadow","WebkitBoxShadow","MozBoxShadow","borderStyle","webkitTransform","mozTransform","WebkitTransform","MozTransform","transformOrigin","webkitTransformOrigin","mozTransformOrigin","WebkitTransformOrigin","MozTransformOrigin","webkitTransition","mozTransition","WebkitTransition","MozTransition","webkitTransitionProperty","mozTransitionProperty","WebkitTransitionProperty","MozTransitionProperty","propsToIgnore","convert","object","Object","keys","newObj","originalKey","originalValue","_convertProperty","convertProperty","key","Array","isArray","isNoFlip","test","getPropertyDoppelganger","getValueDoppelganger","property","isNum","isFunc","importantlessValue","isImportant","valueConverter","newValue","exports"],"sources":["G:/ReactProjects/ReactBasic/node_modules/rtl-css-js/dist/cjs/convert-51dab0c6.js"],"sourcesContent":["'use strict';\r\n\r\n/**\r\n * Takes an array of [keyValue1, keyValue2] pairs and creates an object of {keyValue1: keyValue2, keyValue2: keyValue1}\r\n * @param {Array} array the array of pairs\r\n * @return {Object} the {key, value} pair object\r\n */\r\nfunction arrayToObject(array) {\r\n  return array.reduce(function (obj, _ref) {\r\n    var prop1 = _ref[0],\r\n      prop2 = _ref[1];\r\n    obj[prop1] = prop2;\r\n    obj[prop2] = prop1;\r\n    return obj;\r\n  }, {});\r\n}\r\nfunction isBoolean(val) {\r\n  return typeof val === 'boolean';\r\n}\r\nfunction isFunction(val) {\r\n  return typeof val === 'function';\r\n}\r\nfunction isNumber(val) {\r\n  return typeof val === 'number';\r\n}\r\nfunction isNullOrUndefined(val) {\r\n  return val === null || typeof val === 'undefined';\r\n}\r\nfunction isObject(val) {\r\n  return val && typeof val === 'object';\r\n}\r\nfunction isString(val) {\r\n  return typeof val === 'string';\r\n}\r\nfunction includes(inclusive, inclusee) {\r\n  return inclusive.indexOf(inclusee) !== -1;\r\n}\r\n\r\n/**\r\n * Flip the sign of a CSS value, possibly with a unit.\r\n *\r\n * We can't just negate the value with unary minus due to the units.\r\n *\r\n * @private\r\n * @param {String} value - the original value (for example 77%)\r\n * @return {String} the result (for example -77%)\r\n */\r\nfunction flipSign(value) {\r\n  if (parseFloat(value) === 0) {\r\n    // Don't mangle zeroes\r\n    return value;\r\n  }\r\n  if (value[0] === '-') {\r\n    return value.slice(1);\r\n  }\r\n  return \"-\" + value;\r\n}\r\nfunction flipTransformSign(match, prefix, offset, suffix) {\r\n  return prefix + flipSign(offset) + suffix;\r\n}\r\n\r\n/**\r\n * Takes a percentage for background position and inverts it.\r\n * This was copied and modified from CSSJanus:\r\n * https://github.com/cssjanus/cssjanus/blob/4245f834365f6cfb0239191a151432fb85abab23/src/cssjanus.js#L152-L175\r\n * @param {String} value - the original value (for example 77%)\r\n * @return {String} the result (for example 23%)\r\n */\r\nfunction calculateNewBackgroundPosition(value) {\r\n  var idx = value.indexOf('.');\r\n  if (idx === -1) {\r\n    value = 100 - parseFloat(value) + \"%\";\r\n  } else {\r\n    // Two off, one for the \"%\" at the end, one for the dot itself\r\n    var len = value.length - idx - 2;\r\n    value = 100 - parseFloat(value);\r\n    value = value.toFixed(len) + \"%\";\r\n  }\r\n  return value;\r\n}\r\n\r\n/**\r\n * This takes a list of CSS values and converts it to an array\r\n * @param {String} value - something like `1px`, `1px 2em`, or `3pt rgb(150, 230, 550) 40px calc(100% - 5px)`\r\n * @return {Array} the split values (for example: `['3pt', 'rgb(150, 230, 550)', '40px', 'calc(100% - 5px)']`)\r\n */\r\nfunction getValuesAsList(value) {\r\n  return value.replace(/ +/g, ' ') // remove all extraneous spaces\r\n  .split(' ').map(function (i) {\r\n    return i.trim();\r\n  }) // get rid of extra space before/after each item\r\n  .filter(Boolean) // get rid of empty strings\r\n  // join items which are within parenthese\r\n  // luckily `calc (100% - 5px)` is invalid syntax and it must be `calc(100% - 5px)`, otherwise this would be even more complex\r\n  .reduce(function (_ref2, item) {\r\n    var list = _ref2.list,\r\n      state = _ref2.state;\r\n    var openParansCount = (item.match(/\\(/g) || []).length;\r\n    var closedParansCount = (item.match(/\\)/g) || []).length;\r\n    if (state.parensDepth > 0) {\r\n      list[list.length - 1] = list[list.length - 1] + \" \" + item;\r\n    } else {\r\n      list.push(item);\r\n    }\r\n    state.parensDepth += openParansCount - closedParansCount;\r\n    return {\r\n      list: list,\r\n      state: state\r\n    };\r\n  }, {\r\n    list: [],\r\n    state: {\r\n      parensDepth: 0\r\n    }\r\n  }).list;\r\n}\r\n\r\n/**\r\n * This is intended for properties that are `top right bottom left` and will switch them to `top left bottom right`\r\n * @param {String} value - `1px 2px 3px 4px` for example, but also handles cases where there are too few/too many and\r\n * simply returns the value in those cases (which is the correct behavior)\r\n * @return {String} the result - `1px 4px 3px 2px` for example.\r\n */\r\nfunction handleQuartetValues(value) {\r\n  var splitValues = getValuesAsList(value);\r\n  if (splitValues.length <= 3 || splitValues.length > 4) {\r\n    return value;\r\n  }\r\n  var top = splitValues[0],\r\n    right = splitValues[1],\r\n    bottom = splitValues[2],\r\n    left = splitValues[3];\r\n  return [top, left, bottom, right].join(' ');\r\n}\r\n\r\n/**\r\n *\r\n * @param {String|Number|Object} value css property value to test\r\n * @returns If the css property value can(should?) have an RTL equivalent\r\n */\r\nfunction canConvertValue(value) {\r\n  return !isBoolean(value) && !isNullOrUndefined(value);\r\n}\r\n\r\n/**\r\n * Splits a shadow style into its separate shadows using the comma delimiter, but creating an exception\r\n * for comma separated values in parentheses often used for rgba colours.\r\n * @param {String} value\r\n * @returns {Array} array of all box shadow values in the string\r\n */\r\nfunction splitShadow(value) {\r\n  var shadows = [];\r\n  var start = 0;\r\n  var end = 0;\r\n  var rgba = false;\r\n  while (end < value.length) {\r\n    if (!rgba && value[end] === ',') {\r\n      shadows.push(value.substring(start, end).trim());\r\n      end++;\r\n      start = end;\r\n    } else if (value[end] === \"(\") {\r\n      rgba = true;\r\n      end++;\r\n    } else if (value[end] === ')') {\r\n      rgba = false;\r\n      end++;\r\n    } else {\r\n      end++;\r\n    }\r\n  }\r\n\r\n  // push the last shadow value if there is one\r\n  // istanbul ignore next\r\n  if (start != end) {\r\n    shadows.push(value.substring(start, end + 1));\r\n  }\r\n  return shadows;\r\n}\r\n\r\n// some values require a little fudging, that fudging goes here.\r\nvar propertyValueConverters = {\r\n  padding: function padding(_ref) {\r\n    var value = _ref.value;\r\n    if (isNumber(value)) {\r\n      return value;\r\n    }\r\n    return handleQuartetValues(value);\r\n  },\r\n  textShadow: function textShadow(_ref2) {\r\n    var value = _ref2.value;\r\n    var flippedShadows = splitShadow(value).map(function (shadow) {\r\n      // intentionally leaving off the `g` flag here because we only want to change the first number (which is the offset-x)\r\n      return shadow.replace(/(^|\\s)(-*)([.|\\d]+)/, function (match, whiteSpace, negative, number) {\r\n        if (number === '0') {\r\n          return match;\r\n        }\r\n        var doubleNegative = negative === '' ? '-' : '';\r\n        return \"\" + whiteSpace + doubleNegative + number;\r\n      });\r\n    });\r\n    return flippedShadows.join(',');\r\n  },\r\n  borderColor: function borderColor(_ref3) {\r\n    var value = _ref3.value;\r\n    return handleQuartetValues(value);\r\n  },\r\n  borderRadius: function borderRadius(_ref4) {\r\n    var value = _ref4.value;\r\n    if (isNumber(value)) {\r\n      return value;\r\n    }\r\n    if (includes(value, '/')) {\r\n      var _value$split = value.split('/'),\r\n        radius1 = _value$split[0],\r\n        radius2 = _value$split[1];\r\n      var convertedRadius1 = propertyValueConverters.borderRadius({\r\n        value: radius1.trim()\r\n      });\r\n      var convertedRadius2 = propertyValueConverters.borderRadius({\r\n        value: radius2.trim()\r\n      });\r\n      return convertedRadius1 + \" / \" + convertedRadius2;\r\n    }\r\n    var splitValues = getValuesAsList(value);\r\n    switch (splitValues.length) {\r\n      case 2:\r\n        {\r\n          return splitValues.reverse().join(' ');\r\n        }\r\n      case 4:\r\n        {\r\n          var topLeft = splitValues[0],\r\n            topRight = splitValues[1],\r\n            bottomRight = splitValues[2],\r\n            bottomLeft = splitValues[3];\r\n          return [topRight, topLeft, bottomLeft, bottomRight].join(' ');\r\n        }\r\n      default:\r\n        {\r\n          return value;\r\n        }\r\n    }\r\n  },\r\n  background: function background(_ref5) {\r\n    var value = _ref5.value,\r\n      valuesToConvert = _ref5.valuesToConvert,\r\n      isRtl = _ref5.isRtl,\r\n      bgImgDirectionRegex = _ref5.bgImgDirectionRegex,\r\n      bgPosDirectionRegex = _ref5.bgPosDirectionRegex;\r\n    if (isNumber(value)) {\r\n      return value;\r\n    }\r\n\r\n    // Yeah, this is in need of a refactor 🙃...\r\n    // but this property is a tough cookie 🍪\r\n    // get the backgroundPosition out of the string by removing everything that couldn't be the backgroundPosition value\r\n    var backgroundPositionValue = value.replace(/(url\\(.*?\\))|(rgba?\\(.*?\\))|(hsl\\(.*?\\))|(#[a-fA-F0-9]+)|((^| )(\\D)+( |$))/g, '').trim();\r\n    // replace that backgroundPosition value with the converted version\r\n    value = value.replace(backgroundPositionValue, propertyValueConverters.backgroundPosition({\r\n      value: backgroundPositionValue,\r\n      valuesToConvert: valuesToConvert,\r\n      isRtl: isRtl,\r\n      bgPosDirectionRegex: bgPosDirectionRegex\r\n    }));\r\n    // do the backgroundImage value replacing on the whole value (because why not?)\r\n    return propertyValueConverters.backgroundImage({\r\n      value: value,\r\n      valuesToConvert: valuesToConvert,\r\n      bgImgDirectionRegex: bgImgDirectionRegex\r\n    });\r\n  },\r\n  backgroundImage: function backgroundImage(_ref6) {\r\n    var value = _ref6.value,\r\n      valuesToConvert = _ref6.valuesToConvert,\r\n      bgImgDirectionRegex = _ref6.bgImgDirectionRegex;\r\n    if (!includes(value, 'url(') && !includes(value, 'linear-gradient(')) {\r\n      return value;\r\n    }\r\n    return value.replace(bgImgDirectionRegex, function (match, g1, group2) {\r\n      return match.replace(group2, valuesToConvert[group2]);\r\n    });\r\n  },\r\n  backgroundPosition: function backgroundPosition(_ref7) {\r\n    var value = _ref7.value,\r\n      valuesToConvert = _ref7.valuesToConvert,\r\n      isRtl = _ref7.isRtl,\r\n      bgPosDirectionRegex = _ref7.bgPosDirectionRegex;\r\n    return value\r\n    // intentionally only grabbing the first instance of this because that represents `left`\r\n    .replace(isRtl ? /^((-|\\d|\\.)+%)/ : null, function (match, group) {\r\n      return calculateNewBackgroundPosition(group);\r\n    }).replace(bgPosDirectionRegex, function (match) {\r\n      return valuesToConvert[match];\r\n    });\r\n  },\r\n  backgroundPositionX: function backgroundPositionX(_ref8) {\r\n    var value = _ref8.value,\r\n      valuesToConvert = _ref8.valuesToConvert,\r\n      isRtl = _ref8.isRtl,\r\n      bgPosDirectionRegex = _ref8.bgPosDirectionRegex;\r\n    if (isNumber(value)) {\r\n      return value;\r\n    }\r\n    return propertyValueConverters.backgroundPosition({\r\n      value: value,\r\n      valuesToConvert: valuesToConvert,\r\n      isRtl: isRtl,\r\n      bgPosDirectionRegex: bgPosDirectionRegex\r\n    });\r\n  },\r\n  transition: function transition(_ref9) {\r\n    var value = _ref9.value,\r\n      propertiesToConvert = _ref9.propertiesToConvert;\r\n    return value.split(/,\\s*/g).map(function (transition) {\r\n      var values = transition.split(' ');\r\n\r\n      // Property is always defined first\r\n      values[0] = propertiesToConvert[values[0]] || values[0];\r\n      return values.join(' ');\r\n    }).join(', ');\r\n  },\r\n  transitionProperty: function transitionProperty(_ref10) {\r\n    var value = _ref10.value,\r\n      propertiesToConvert = _ref10.propertiesToConvert;\r\n    return value.split(/,\\s*/g).map(function (prop) {\r\n      return propertiesToConvert[prop] || prop;\r\n    }).join(', ');\r\n  },\r\n  transform: function transform(_ref11) {\r\n    var value = _ref11.value;\r\n    // This was copied and modified from CSSJanus:\r\n    // https://github.com/cssjanus/cssjanus/blob/4a40f001b1ba35567112d8b8e1d9d95eda4234c3/src/cssjanus.js#L152-L153\r\n    var nonAsciiPattern = \"[^\\\\u0020-\\\\u007e]\";\r\n    var escapePattern = \"(?:\" + '(?:(?:\\\\[0-9a-f]{1,6})(?:\\\\r\\\\n|\\\\s)?)' + \"|\\\\\\\\[^\\\\r\\\\n\\\\f0-9a-f])\";\r\n    var signedQuantPattern = \"((?:-?\" + ('(?:[0-9]*\\\\.[0-9]+|[0-9]+)' + \"(?:\\\\s*\" + '(?:em|ex|px|cm|mm|in|pt|pc|deg|rad|grad|ms|s|hz|khz|%)' + \"|\" + (\"-?\" + (\"(?:[_a-z]|\" + nonAsciiPattern + \"|\" + escapePattern + \")\") + (\"(?:[_a-z0-9-]|\" + nonAsciiPattern + \"|\" + escapePattern + \")\") + \"*\") + \")?\") + \")|(?:inherit|auto))\";\r\n    var translateXRegExp = new RegExp(\"(translateX\\\\s*\\\\(\\\\s*)\" + signedQuantPattern + \"(\\\\s*\\\\))\", 'gi');\r\n    var translateRegExp = new RegExp(\"(translate\\\\s*\\\\(\\\\s*)\" + signedQuantPattern + \"((?:\\\\s*,\\\\s*\" + signedQuantPattern + \"){0,1}\\\\s*\\\\))\", 'gi');\r\n    var translate3dRegExp = new RegExp(\"(translate3d\\\\s*\\\\(\\\\s*)\" + signedQuantPattern + \"((?:\\\\s*,\\\\s*\" + signedQuantPattern + \"){0,2}\\\\s*\\\\))\", 'gi');\r\n    var rotateRegExp = new RegExp(\"(rotate[ZY]?\\\\s*\\\\(\\\\s*)\" + signedQuantPattern + \"(\\\\s*\\\\))\", 'gi');\r\n    return value.replace(translateXRegExp, flipTransformSign).replace(translateRegExp, flipTransformSign).replace(translate3dRegExp, flipTransformSign).replace(rotateRegExp, flipTransformSign);\r\n  }\r\n};\r\npropertyValueConverters.objectPosition = propertyValueConverters.backgroundPosition;\r\npropertyValueConverters.margin = propertyValueConverters.padding;\r\npropertyValueConverters.borderWidth = propertyValueConverters.padding;\r\npropertyValueConverters.boxShadow = propertyValueConverters.textShadow;\r\npropertyValueConverters.webkitBoxShadow = propertyValueConverters.boxShadow;\r\npropertyValueConverters.mozBoxShadow = propertyValueConverters.boxShadow;\r\npropertyValueConverters.WebkitBoxShadow = propertyValueConverters.boxShadow;\r\npropertyValueConverters.MozBoxShadow = propertyValueConverters.boxShadow;\r\npropertyValueConverters.borderStyle = propertyValueConverters.borderColor;\r\npropertyValueConverters.webkitTransform = propertyValueConverters.transform;\r\npropertyValueConverters.mozTransform = propertyValueConverters.transform;\r\npropertyValueConverters.WebkitTransform = propertyValueConverters.transform;\r\npropertyValueConverters.MozTransform = propertyValueConverters.transform;\r\npropertyValueConverters.transformOrigin = propertyValueConverters.backgroundPosition;\r\npropertyValueConverters.webkitTransformOrigin = propertyValueConverters.transformOrigin;\r\npropertyValueConverters.mozTransformOrigin = propertyValueConverters.transformOrigin;\r\npropertyValueConverters.WebkitTransformOrigin = propertyValueConverters.transformOrigin;\r\npropertyValueConverters.MozTransformOrigin = propertyValueConverters.transformOrigin;\r\npropertyValueConverters.webkitTransition = propertyValueConverters.transition;\r\npropertyValueConverters.mozTransition = propertyValueConverters.transition;\r\npropertyValueConverters.WebkitTransition = propertyValueConverters.transition;\r\npropertyValueConverters.MozTransition = propertyValueConverters.transition;\r\npropertyValueConverters.webkitTransitionProperty = propertyValueConverters.transitionProperty;\r\npropertyValueConverters.mozTransitionProperty = propertyValueConverters.transitionProperty;\r\npropertyValueConverters.WebkitTransitionProperty = propertyValueConverters.transitionProperty;\r\npropertyValueConverters.MozTransitionProperty = propertyValueConverters.transitionProperty;\r\n\r\n// kebab-case versions\r\n\r\npropertyValueConverters['text-shadow'] = propertyValueConverters.textShadow;\r\npropertyValueConverters['border-color'] = propertyValueConverters.borderColor;\r\npropertyValueConverters['border-radius'] = propertyValueConverters.borderRadius;\r\npropertyValueConverters['background-image'] = propertyValueConverters.backgroundImage;\r\npropertyValueConverters['background-position'] = propertyValueConverters.backgroundPosition;\r\npropertyValueConverters['background-position-x'] = propertyValueConverters.backgroundPositionX;\r\npropertyValueConverters['object-position'] = propertyValueConverters.objectPosition;\r\npropertyValueConverters['border-width'] = propertyValueConverters.padding;\r\npropertyValueConverters['box-shadow'] = propertyValueConverters.textShadow;\r\npropertyValueConverters['-webkit-box-shadow'] = propertyValueConverters.textShadow;\r\npropertyValueConverters['-moz-box-shadow'] = propertyValueConverters.textShadow;\r\npropertyValueConverters['border-style'] = propertyValueConverters.borderColor;\r\npropertyValueConverters['-webkit-transform'] = propertyValueConverters.transform;\r\npropertyValueConverters['-moz-transform'] = propertyValueConverters.transform;\r\npropertyValueConverters['transform-origin'] = propertyValueConverters.transformOrigin;\r\npropertyValueConverters['-webkit-transform-origin'] = propertyValueConverters.transformOrigin;\r\npropertyValueConverters['-moz-transform-origin'] = propertyValueConverters.transformOrigin;\r\npropertyValueConverters['-webkit-transition'] = propertyValueConverters.transition;\r\npropertyValueConverters['-moz-transition'] = propertyValueConverters.transition;\r\npropertyValueConverters['transition-property'] = propertyValueConverters.transitionProperty;\r\npropertyValueConverters['-webkit-transition-property'] = propertyValueConverters.transitionProperty;\r\npropertyValueConverters['-moz-transition-property'] = propertyValueConverters.transitionProperty;\r\n\r\n// this will be an object of properties that map to their corresponding rtl property (their doppelganger)\r\nvar propertiesToConvert = arrayToObject([['paddingLeft', 'paddingRight'], ['marginLeft', 'marginRight'], ['left', 'right'], ['borderLeft', 'borderRight'], ['borderLeftColor', 'borderRightColor'], ['borderLeftStyle', 'borderRightStyle'], ['borderLeftWidth', 'borderRightWidth'], ['borderTopLeftRadius', 'borderTopRightRadius'], ['borderBottomLeftRadius', 'borderBottomRightRadius'],\r\n// kebab-case versions\r\n['padding-left', 'padding-right'], ['margin-left', 'margin-right'], ['border-left', 'border-right'], ['border-left-color', 'border-right-color'], ['border-left-style', 'border-right-style'], ['border-left-width', 'border-right-width'], ['border-top-left-radius', 'border-top-right-radius'], ['border-bottom-left-radius', 'border-bottom-right-radius']]);\r\nvar propsToIgnore = ['content'];\r\n\r\n// this is the same as the propertiesToConvert except for values\r\nvar valuesToConvert = arrayToObject([['ltr', 'rtl'], ['left', 'right'], ['w-resize', 'e-resize'], ['sw-resize', 'se-resize'], ['nw-resize', 'ne-resize']]);\r\n\r\n// Sorry for the regex 😞, but basically thisis used to replace _every_ instance of\r\n// `ltr`, `rtl`, `right`, and `left` in `backgroundimage` with the corresponding opposite.\r\n// A situation we're accepting here:\r\n// url('/left/right/rtl/ltr.png') will be changed to url('/right/left/ltr/rtl.png')\r\n// Definite trade-offs here, but I think it's a good call.\r\nvar bgImgDirectionRegex = new RegExp('(^|\\\\W|_)((ltr)|(rtl)|(left)|(right))(\\\\W|_|$)', 'g');\r\nvar bgPosDirectionRegex = new RegExp('(left)|(right)');\r\n\r\n/**\r\n * converts properties and values in the CSS in JS object to their corresponding RTL values\r\n * @param {Object} object the CSS in JS object\r\n * @return {Object} the RTL converted object\r\n */\r\nfunction convert(object) {\r\n  return Object.keys(object).reduce(function (newObj, originalKey) {\r\n    var originalValue = object[originalKey];\r\n    if (isString(originalValue)) {\r\n      // you're welcome to later code 😺\r\n      originalValue = originalValue.trim();\r\n    }\r\n\r\n    // Some properties should never be transformed\r\n    if (includes(propsToIgnore, originalKey)) {\r\n      newObj[originalKey] = originalValue;\r\n      return newObj;\r\n    }\r\n    var _convertProperty = convertProperty(originalKey, originalValue),\r\n      key = _convertProperty.key,\r\n      value = _convertProperty.value;\r\n    newObj[key] = value;\r\n    return newObj;\r\n  }, Array.isArray(object) ? [] : {});\r\n}\r\n\r\n/**\r\n * Converts a property and its value to the corresponding RTL key and value\r\n * @param {String} originalKey the original property key\r\n * @param {Number|String|Object} originalValue the original css property value\r\n * @return {Object} the new {key, value} pair\r\n */\r\nfunction convertProperty(originalKey, originalValue) {\r\n  var isNoFlip = /\\/\\*\\s?@noflip\\s?\\*\\//.test(originalValue);\r\n  var key = isNoFlip ? originalKey : getPropertyDoppelganger(originalKey);\r\n  var value = isNoFlip ? originalValue : getValueDoppelganger(key, originalValue);\r\n  return {\r\n    key: key,\r\n    value: value\r\n  };\r\n}\r\n\r\n/**\r\n * This gets the RTL version of the given property if it has a corresponding RTL property\r\n * @param {String} property the name of the property\r\n * @return {String} the name of the RTL property\r\n */\r\nfunction getPropertyDoppelganger(property) {\r\n  return propertiesToConvert[property] || property;\r\n}\r\n\r\n/**\r\n * This converts the given value to the RTL version of that value based on the key\r\n * @param {String} key this is the key (note: this should be the RTL version of the originalKey)\r\n * @param {String|Number|Object} originalValue the original css property value. If it's an object, then we'll convert that as well\r\n * @return {String|Number|Object} the converted value\r\n */\r\nfunction getValueDoppelganger(key, originalValue) {\r\n  if (!canConvertValue(originalValue)) {\r\n    return originalValue;\r\n  }\r\n  if (isObject(originalValue)) {\r\n    return convert(originalValue); // recursion 🌀\r\n  }\r\n\r\n  var isNum = isNumber(originalValue);\r\n  var isFunc = isFunction(originalValue);\r\n  var importantlessValue = isNum || isFunc ? originalValue : originalValue.replace(/ !important.*?$/, '');\r\n  var isImportant = !isNum && importantlessValue.length !== originalValue.length;\r\n  var valueConverter = propertyValueConverters[key];\r\n  var newValue;\r\n  if (valueConverter) {\r\n    newValue = valueConverter({\r\n      value: importantlessValue,\r\n      valuesToConvert: valuesToConvert,\r\n      propertiesToConvert: propertiesToConvert,\r\n      isRtl: true,\r\n      bgImgDirectionRegex: bgImgDirectionRegex,\r\n      bgPosDirectionRegex: bgPosDirectionRegex\r\n    });\r\n  } else {\r\n    newValue = valuesToConvert[importantlessValue] || importantlessValue;\r\n  }\r\n  if (isImportant) {\r\n    return newValue + \" !important\";\r\n  }\r\n  return newValue;\r\n}\r\n\r\nexports.arrayToObject = arrayToObject;\r\nexports.calculateNewBackgroundPosition = calculateNewBackgroundPosition;\r\nexports.canConvertValue = canConvertValue;\r\nexports.convert = convert;\r\nexports.convertProperty = convertProperty;\r\nexports.flipSign = flipSign;\r\nexports.flipTransformSign = flipTransformSign;\r\nexports.getPropertyDoppelganger = getPropertyDoppelganger;\r\nexports.getValueDoppelganger = getValueDoppelganger;\r\nexports.getValuesAsList = getValuesAsList;\r\nexports.handleQuartetValues = handleQuartetValues;\r\nexports.includes = includes;\r\nexports.isBoolean = isBoolean;\r\nexports.isFunction = isFunction;\r\nexports.isNullOrUndefined = isNullOrUndefined;\r\nexports.isNumber = isNumber;\r\nexports.isObject = isObject;\r\nexports.isString = isString;\r\nexports.propertiesToConvert = propertiesToConvert;\r\nexports.propertyValueConverters = propertyValueConverters;\r\nexports.propsToIgnore = propsToIgnore;\r\nexports.splitShadow = splitShadow;\r\nexports.valuesToConvert = valuesToConvert;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}